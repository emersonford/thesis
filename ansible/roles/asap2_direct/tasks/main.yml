---
- name: Install dependencies
  apt:
    name: "openvswitch-switch"
    state: present

- name: Check if Docker SRIOV OVS containers are running
  shell: "docker ps | grep rdma/sriov-plugin"
  changed_when: false
  failed_when: false
  register: docker_sriov_check

- name: Initialize Docker SRIOV OVS containers
  shell: |
    docker pull rdma/sriov-plugin
    docker pull rdma/container_tools_installer
    docker run --net=host -v /usr/bin:/tmp rdma/container_tools_installer
    docker run -v /run/docker/plugins:/run/docker/plugins -v /etc/docker:/etc/docker -v /var/run:/var/run --net=host --privileged --rm -d rdma/sriov-plugin
  when: "docker_sriov_check.rc != 0"

- name: Start OpenVSwitch
  service: 
    name: openvswitch-switch
    state: started
    enabled: yes

- name: Check OVS bridge exists
  shell: "ovs-vsctl br-exists ovs-sriov"
  register: ovs_bridge_check
  failed_when: false
  changed_when: "ovs_bridge_check.rc == 2"
  notify:
    - Add OVS bridge

- name: Check OVS hardware offload
  shell: "ovs-vsctl get Open_vSwitch . other_config:hw-offload"
  register: ovs_hw_offload_check
  failed_when: false
  changed_when: "ovs_hw_offload_check.stdout != '\"true\"'"
  notify:
    - Enable hardware offload

- name: Force all handlers to run
  meta: flush_handlers

- name: Get SRIOV parent device interface
  shell: "ibdev2netdev | grep '{{ sriov_parent_device }} port 1' | sed 's/{{ sriov_parent_device }} .* ==> \\(.*\\) (.*)/\\1/'"
  register: sriov_if
  changed_when: false

- name: Get SRIOV parent interface switch ID
  shell: "ip -d link show {{ sriov_if.stdout }} | grep 'switchid' | sed 's/.*switchid \\([a-f0-9]\\+\\)/\\1/'"
  register: switchid_cmd
  changed_when: false

# - name: Create net setup link rules
#   template:
#     dest: '/etc/udev/rules.d/82-net-setup-link.rules'
#     src: 'net-setup-link.rules'
#     mode: '644'
#   vars:
#     switch_id: "{{ switchid_cmd.stdout }}"
#     parent_if: "{{ sriov_if.stdout }}"

- name: Check if SRIOV parent interface added to OVS switch 
  shell: "ovs-vsctl list-ports ovs-sriov | grep -E '^{{ sriov_if.stdout }}$'"
  register: ovs_switch_parent_if_check
  changed_when: false
  failed_when: false

- name: Add SRIOV parent interface to OpenVSwitch
  shell: |
    ovs-vsctl add-port ovs-sriov {{ sriov_if.stdout }}
    # ip link set dev {{ sriov_if.stdout }} up
  when: "ovs_switch_parent_if_check.rc != 0"

- name: Configure TC on parent if
  shell: "tc qdisc add dev {{ sriov_if.stdout }} ingress || tc qdisc replace dev {{ sriov_if.stdout }} ingress"
  when: "ovs_switch_parent_if_check.rc != 0"

- name: Check SRIOV parent interface switch mode
  shell: "cat /sys/class/net/{{ sriov_if.stdout }}/compat/devlink/mode"
  register: switch_mode
  changed_when: false
  failed_when: false

- name: Configure switchdev on parent if
  shell: |
    set -euxo pipefail

    docker_rdma_sriov sriov enable -n {{ sriov_if.stdout }}
    docker_rdma_sriov sriov unbind -n {{ sriov_if.stdout }}
    docker_rdma_sriov devlink set -n {{ sriov_if.stdout }} -m switchdev
    docker_rdma_sriov sriov bind -n {{ sriov_if.stdout }}
  args:
    executable: /usr/bin/bash
  when: "switch_mode.stdout != 'switchdev' and switch_mode.rc == 0"

- name: Refresh facts
  setup:

- name: Get list of VF interface names
  shell: |
    set -euxo pipefail
    IB_DEV_OUTPUT="$(ibdev2netdev -v)"

    for i in $(seq 0 {{ (NUM_OF_VFS | int - 1) }}); do 
      PCIE_ADDR="$(grep PCI_SLOT_NAME /sys/class/net/{{ sriov_if.stdout }}/device/virtfn$i/uevent | sed 's:.*PCI_SLOT_NAME=::')"
      
      IF_NAME="$(echo "$IB_DEV_OUTPUT" | grep -E "^$PCIE_ADDR " | sed 's/.* ==> \(.*\) (.*)/\1/')"

      echo "$i $IF_NAME $PCIE_ADDR"
    done
  args:
    executable: /usr/bin/bash
  register: vf_if_names
  changed_when: false

- name: Configure VFs
  shell: |
    set -euxo pipefail

    VF_NAME="{{ item.split()[1] }}"
    VF_MAC_ADDR="$(cat /sys/class/net/$VF_NAME/address)"
    MATCHING_VF_MAC_ADDR="{{ hostvars[groups[group_name][((hostvars[groups[group_name][0]]["ansible_hostname"] == ansible_hostname) | ternary(1, 0))]]["ansible_" + item.split()[1]]["macaddress"] }}"
    REPR_NAME="{{ sriov_if.stdout }}_{{ item.split()[0] }}"

    if ! ovs-vsctl list-ports ovs-sriov | grep $REPR_NAME; then
      ovs-vsctl add-port ovs-sriov $REPR_NAME
      tc qdisc add dev $REPR_NAME ingress || tc qdisc replace dev $REPR_NAME ingress
      tc filter add dev {{ sriov_if.stdout }} protocol ip parent ffff: flower ip_proto udp dst_port 4791 skip_sw dst_mac $VF_MAC_ADDR action mirred egress redirect dev $REPR_NAME
      tc filter add dev $REPR_NAME protocol ip parent ffff: flower skip_sw ip_proto udp dst_mac $MATCHING_VF_MAC_ADDR dst_port 4791 action mirred egress redirect dev {{ sriov_if.stdout }}
      
      echo "changed"
    fi
  args:
    executable: /usr/bin/bash
  loop: "{{ vf_if_names.stdout | trim | split('\n') | select() }}"
  register: configure_vf_res
  changed_when: configure_vf_res.stdout == "changed"

- name: Check Docker SRIOV network 
  shell: "docker network ls | grep 'mynet' | grep 'sriov'"
  register: docker_sriov_net_check
  changed_when: false
  failed_when: false

- name: Configure Docker SRIOV network
  shell: docker network create -d sriov --subnet=192.168.1.0/24 -o netdevice={{ sriov_if.stdout }} mynet
  when: "docker_sriov_net_check.rc != 0"
